API Documentation
This contains the API Endpoints, what the endpoint does, data it requires/can have and the data it returns.

Query paramaters work as follows:
'/users/?email=jamesbond@example.org&ordering=name'

Variables in urls are encapsulated in angular brackets <>
[users/<userid:int>/]
When <userid> is used in a description, it is refering to the userid in the url.

An indentation means that the url procedes it's parent url. e.g:
[test/]
    - Description: 
        - Contains information about test
    - Requires:
        - email (string)
        - password (string)
    - Returns:
        - token (string)
        - email (string)

    [user/]
        - Description:
            - This URL to be called will be './test/user/'
        - Requires:
            - email (string)
            - password (string)
            - option (string)
                - Extra information about paramaters that may be required

--- Documentation Begins ---

[homepage/]
    - Description:
        - access to data society info wihtout auth
    
    - Requires:
        - nothing

    - Methods:
        - GET
            - Returns a alist of all societies with society name, image and about_us

[log_out]
    - Description:
        - api endpoint to logout
    - Requires:
        - nothing

[log_in/]
    - Description:
        - api login endpoint
    - Methods:
        - GET
            - returns request.user and request.auth
        - POST
            - Enter credentials to login
            - Requires:
                - 'email'
                - 'password'
            - Returns:
                - token
                - email
                - is_authenticated

[users/]
    - Description:
        - access to a list of all the users
    - Requires:
        - Authroizatin header: "token <token>" except for POST
    - Optional:
        - Accepts query paramaters:
            - ordering
            - Any model field such as email,user_level

    - Methods:
        - GET
            - a list of all the users
        - POST
            - will create a user 
            - Requires:
                - user
                    - email
                    - password
                - university_studying_at
                - first_name
                - last_name
                - field_of_study

    [<usersid:int>/]
        - Description:
            - access to user with id <usersid>
        - Requires:
            - Authroizatin header: "token <token>" except for POST
        -Methods:
            - GET
                - user data about user with id <userid>
                - Fields:
                    - id - Int
                    - email - String
                    - user_level
            - PUT
                - any field data for user you want to change including password

[people/]
    - Description:
        - access to a list of all the people 
    - Requires:
        - Authroizatin header: "token <token>" except for POST
    - Optional:
        - Accepts query paramaters:
            - ordering
            - Any model field such as email,user_level

    - Methods:
        - GET
            - a list of all the people

    [<usersid:int>/]
        - Description:
            - access to people with id <usersid>
        - Requires:
            - Authroizatin header: "token <token>" except for POST
        -Methods:
            - GET
                - user data about user with id <userid>
                - Fields:
                    - id - Int
                    - email - String
                    - user_level
            - PUT
                - has to be the same user
                - any field data for user you want to change including password

[society/]
    - Description:
        - access to a list of all the society
    - Requires:
        - Authroizatin header: "token <token>" except for POST
    - Optional:
        - Accepts query paramaters:
            - ordering
            - Any model field such as user,name
    - Methods:
        - GET
            - a list of all the societies
        - POST
            - will create a society
            - Requires:
                - user
                    - email
                    - password
                - university_society_is_at
                - name
                - creation_date
                - image // note that this is a file
                - about_us
            - Returns the created society
    
    [<societyid:int>/]
        - Description:
            - access to society with id <societyid>
        - Requires:
            - Authroizatin header: "token <token>" except for POST
        -Methods:
            - GET
                - dict of society data about society with id <societyid>
                - Fields:
                    - pk - Int
                    - user - User (String)
                    - name - String
                    - creation_date - Date
                    - university_society_is_at - University (String)
                    - join_date - Date
                    - about_us
            - PUT
                - any field in society model
                - To change password, user has to be the same account

[societyrole/]
    - Description
        - returns a list of all roles between people and societies
    - Requires:
        - Authroizatin header: "token <token>" except for POST
    - Methods:
        - GET
            - a list of all the people and societies that have the roles
    
    [update/]
        - Description:
            - used to update the role of members in a society
        - Methods:
            - post
        - Requires:
            - Authroizatin header: "token <token>" except for POST
            - body:
                - if society account(user.user_level==3):
                    - user
                    - role_level
                - otherwise if the user has enough power:
                    - society
                    - user
                    - role_level
    
    [remove/]
        - Description:
            - remove user from society
        -Methods:
            - POST
        - Requires:
            - Authroizatin header: "token <token>" except for POST
            - body:
                - if removing own user from society:
                    - society
                    - Note: Cannot remove society account from society
                - else:
                    - user
                    - society
                    - Note: User must have enough power to remove another user
    [join/]
        - Description:
            - api to join a society
        -Methods:
            - POST
        - Requires:
            - Authroizatin header: "token <token>" except for POST
            - Note: Can not be a society account
            - body:
                - society

[event/]
    - Description:
        - access to a list of all the events
    - Requires:
        - Authroization header: "token <token>" except for POST
    - Optional:
        - Accepts query paramaters:
            - ordering
            - Any model field such as event_name
    - Methods:
        - GET
            - a list of all the event
        - POST
            - will create an event
    
    [<eventpk:int>/]
        - Description:
            - access to event with id <eventpk>
        - Requires:
            - Authroization header: "token <token>" except for POST
        -Methods:
            - GET
                - dict of event data about event with id <eventpk>
                - Fields:
                    - id - Int
                    - society_email - Email
                    - duration - Int
                    - event_date - Date
                    - event_name - String
                    - location - String
                    - description - String
                    - price - Float
                    - update_time - Date
                    - create_time - Date

[university/]
    - Description:
        - access to a list of all the universities
    - Requires:
        - CSRF and SessionID as cookie
    - Optional:
        - Accepts query paramaters:
            - ordering
            - Any model field such as event_name
    - Methods:
        - GET
            - a list of all the universities
        - POST
            - adds a university
    
    [/<universityid:str>/]
        - Description:
            - access to university with id <universityid>
        - Requires:
            - CSRF and SessionID as cookie
        - Optional:
        -Methods:
            - GET
                - dict of university data about university with id <universityid>
                - Fields:
                    - name - String
                    - latitude - Float
                    - longitude - Float
                    - street_name - String
                    - postcode - String

[people/]

[societyrole/]

[ticket/]

[event_categories/]

[society_categories/]

[event_categories_type/]

[society_categories_type/]